module DelayGenerator #(parameter NCHAN = 4, NBITS = 4, MAX_REGS_PER_CHANNEL = 16)(
    input wire [NCHAN-1:0] Delays [NBITS-1:0],
    input wire [NCHAN-1:0] ChannelEnable,
    input wire [NCHAN-1:0] Reset,
    output reg [NCHAN-1:0] Out
);

reg [NBITS-1:0] delayCounts [NCHAN-1:0];
reg [MAX_REGS_PER_CHANNEL-1:0] delayRegisters [NCHAN-1:0][NBITS-1:0];

// Initialization
integer i, j;
initial begin
    for (i = 0; i < NCHAN; i = i + 1) begin
        for (j = 0; j < NBITS; j = j + 1) begin
            delayCounts[i][j] <= 0;
            delayRegisters[i][j] <= 0;
        end
    end
end

// Delay count and output selection
always @(*) begin
    for (i = 0; i < NCHAN; i = i + 1) begin
        Out[i] = delayRegisters[i][Delays[i]];
    end
end

// Update delay count and registers based on input Delays
always @(posedge Clock) begin
    for (i = 0; i < NCHAN; i = i + 1) begin
        for (j = 0; j < NBITS; j = j + 1) begin
            if (Reset[i])
                delayCounts[i][j] <= 0;
            else if (ChannelEnable[i])
                delayCounts[i][j] <= Delays[i][j];
            
            delayRegisters[i][j] <= delayCounts[i][j] ? delayRegisters[i][j] + 1 : 0;
        end
    end
end

endmodule